<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

<!--  트랜잭션 / 설정하기 
expression 이 부분에서 호출될 클래스와 함수 이름 지정하기 
 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="txAdvisePointCut" 
		expression=
	"execution(public * com.multi.travel..service.*ServiceImpl.*(..))"/>
		<aop:advisor id="transactionAdvisor" 
		pointcut-ref="txAdvisePointCut"
		advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller 
	programming model
	@Controller - @Service - @Repository 
	이 어노테이션 사용한다 
	-->
	<annotation-driven />

	<!-- Handles HTTP GET requests for 
	/resources/** by efficiently 
	serving up static resources in the 
	${webappRoot}/resources directory -->
	
	<!-- css/javascript/js/image 들 
	WebApp/resources 이 아래에 두고 
	url은 /resources 로 접근한다   -->
	<resources mapping="/resources/**" 
	       location="/resources/" />
	
	
	       
	<!-- 컨트롤러가 이동할 jsp 페이지를 보낸다 
	String 을 반환할 경우에는 직접 jsp 경로지정
	void 의 경우 url 따라서 jsp 페이지 결정
	ModelAndView viewName  설정 
	 /sample/sam1.mt
	 InternalResourceViewResolver가 
	/WEB-INF/views/sample/sam1.jsp 로 바꿔서
	페이지 포워딩 해준다 
	-->
	<beans:bean 
	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--  @Controller, @Service, @Repository 
	      @Autowired  
	      base-package 아래에 있는 
	      모든 클래스 찾아서 객체를 만들어준다 
	-->
	<context:component-scan base-package="com.multi.travel" />
	
	

	
	
 
	<beans:bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <beans:property name="maxUploadSize" value="1000000000" />
        <beans:property name="maxInMemorySize" value="1000000000" />
		<beans:property name="maxUploadSizePerFile" value="5242880000"/>
	</beans:bean>

<!-- interceptor 만들기,  url요청을 미리 중간에서 
가로채서, 다른 작업을 해야 할 필요가 있을때 사용한다 
여러가지 용도라 사용하는데 특히 로그온 여부에 따라 
특정 url에 접근 가능한지 여부를 따지기 위해 사용한다 -->

	<interceptors>
	
        <interceptor>
         <!-- 모든 URL 요청 mvc 인터셉터를 거치게 하도록 정의 -->
        	<mapping path="/**/*" />
            <!--  <exclude-mapping path="/WEB-INF/resources/*"/>  -->       
        
           <!--  인터셉터를 거치지 않고 예외 시킬 URL 요청들 정의 -->
            <exclude-mapping path="/home.do"/>
            <exclude-mapping path="/member/*"/>
			<exclude-mapping path="/home"/>
			<exclude-mapping path="/ImageList.do"/>            
            
<!--             <exclude-mapping path="/board/list.mt"/>
            <exclude-mapping path="/board/view.mt"/>
            <exclude-mapping path="/board/list.do"/>
            <exclude-mapping path="/board/view.do"/>
            <exclude-mapping path="/board/write.do"/>
            <exclude-mapping path="/board/write.mt"/> -->
        <!--      <exclude-mapping path="/board/write"/>			
            <exclude-mapping path="/board/list"/>
            <exclude-mapping path="/board/view"/>-->
            			
            <exclude-mapping path="/resources/*"/>
            <exclude-mapping path="/resources/template/css/*"/>
            <exclude-mapping path="/resources/template/images/*"/>
            <exclude-mapping path="/resources/template/images/login/*"/>
            <exclude-mapping path="/resources/template/travel/resources/js/*"/>
            
            
            <beans:bean 
     class="com.multi.travel.common.LoginInterceptor"/>   
        </interceptor>
    
                
    </interceptors>





	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<beans:bean id="loggerAspect"
		class="com.multi.travel.common.MyLogger" />
		
	
</beans:beans>
